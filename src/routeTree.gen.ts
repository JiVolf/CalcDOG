/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as HighscoresImport } from './routes/highscores'
import { Route as GameImport } from './routes/game'
import { Route as ClanImport } from './routes/clan'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const HighscoresRoute = HighscoresImport.update({
  id: '/highscores',
  path: '/highscores',
  getParentRoute: () => rootRoute,
} as any)

const GameRoute = GameImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRoute,
} as any)

const ClanRoute = ClanImport.update({
  id: '/clan',
  path: '/clan',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/clan': {
      id: '/clan'
      path: '/clan'
      fullPath: '/clan'
      preLoaderRoute: typeof ClanImport
      parentRoute: typeof rootRoute
    }
    '/game': {
      id: '/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameImport
      parentRoute: typeof rootRoute
    }
    '/highscores': {
      id: '/highscores'
      path: '/highscores'
      fullPath: '/highscores'
      preLoaderRoute: typeof HighscoresImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/clan': typeof ClanRoute
  '/game': typeof GameRoute
  '/highscores': typeof HighscoresRoute
  '/settings': typeof SettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/clan': typeof ClanRoute
  '/game': typeof GameRoute
  '/highscores': typeof HighscoresRoute
  '/settings': typeof SettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/clan': typeof ClanRoute
  '/game': typeof GameRoute
  '/highscores': typeof HighscoresRoute
  '/settings': typeof SettingsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/clan' | '/game' | '/highscores' | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/clan' | '/game' | '/highscores' | '/settings'
  id: '__root__' | '/' | '/clan' | '/game' | '/highscores' | '/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClanRoute: typeof ClanRoute
  GameRoute: typeof GameRoute
  HighscoresRoute: typeof HighscoresRoute
  SettingsRoute: typeof SettingsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClanRoute: ClanRoute,
  GameRoute: GameRoute,
  HighscoresRoute: HighscoresRoute,
  SettingsRoute: SettingsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/clan",
        "/game",
        "/highscores",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/clan": {
      "filePath": "clan.tsx"
    },
    "/game": {
      "filePath": "game.tsx"
    },
    "/highscores": {
      "filePath": "highscores.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
